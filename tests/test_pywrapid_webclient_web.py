# Automatically generated by Pynguin.
import email._encoded_words as module_2
import locale as module_3
import os
import quopri as module_4

import pytest

import pywrapid.webclient.exceptions as module_1
import pywrapid.webclient.web as module_0

# flake8: ignore=F841


def test_case_0():
    str_0 = "FHv,N~>mM"
    web_credentials_0 = module_0.WebCredentials(str_0)
    assert (
        f"{type(web_credentials_0).__module__}.{type(web_credentials_0).__qualname__}"
        == "pywrapid.webclient.web.WebCredentials"
    )
    assert (
        f"{type(module_0.WebCredentials.options).__module__}.{type(module_0.WebCredentials.options).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WebCredentials.login_url).__module__}.{type(module_0.WebCredentials.login_url).__qualname__}"
        == "builtins.property"
    )


def test_case_1():
    web_credentials_0 = module_0.WebCredentials()
    assert (
        f"{type(web_credentials_0).__module__}.{type(web_credentials_0).__qualname__}"
        == "pywrapid.webclient.web.WebCredentials"
    )
    assert (
        f"{type(module_0.WebCredentials.options).__module__}.{type(module_0.WebCredentials.options).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WebCredentials.login_url).__module__}.{type(module_0.WebCredentials.login_url).__qualname__}"
        == "builtins.property"
    )


def test_case_2():
    str_0 = ""
    with pytest.raises(module_1.CredentialCertificateFileError):
        module_0.X509Credentials(str_0, str_0, str_0)


def test_case_3():
    web_client_0 = module_0.WebClient()
    assert (
        f"{type(web_client_0).__module__}.{type(web_client_0).__qualname__}"
        == "pywrapid.webclient.web.WebClient"
    )


def test_case_4():
    pass


def test_case_5():
    str_0 = "#\nM,k(0Lf9E2-#Px9o\x0b*"
    basic_auth_credentials_0 = module_0.BasicAuthCredentials(str_0, str_0)
    assert (
        f"{type(basic_auth_credentials_0).__module__}.{type(basic_auth_credentials_0).__qualname__}"
        == "pywrapid.webclient.web.BasicAuthCredentials"
    )


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    web_client_0 = module_0.WebClient(wrapid_config=none_type_0)
    assert (
        f"{type(web_client_0).__module__}.{type(web_client_0).__qualname__}"
        == "pywrapid.webclient.web.WebClient"
    )
    web_credentials_0 = module_0.WebCredentials()
    assert (
        f"{type(web_credentials_0).__module__}.{type(web_credentials_0).__qualname__}"
        == "pywrapid.webclient.web.WebCredentials"
    )
    assert (
        f"{type(module_0.WebCredentials.options).__module__}.{type(module_0.WebCredentials.options).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WebCredentials.login_url).__module__}.{type(module_0.WebCredentials.login_url).__qualname__}"
        == "builtins.property"
    )
    web_credentials_1 = module_0.WebCredentials()
    module_0.WebClient(credentials=web_client_0, wrapid_config=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    authorization_type_0 = module_0.AuthorizationType.NONE
    dict_0 = {authorization_type_0: authorization_type_0}
    web_client_0 = module_0.WebClient(dict_config=dict_0)
    assert (
        f"{type(web_client_0).__module__}.{type(web_client_0).__qualname__}"
        == "pywrapid.webclient.web.WebClient"
    )
    authorization_type_1 = module_0.AuthorizationType.BEARER
    str_0 = "J@st"
    dict_1 = {str_0: authorization_type_1}
    module_2.encode(dict_1, encoding=str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    var_0 = module_3.getlocale()
    module_0.WebClient(wrapid_config=var_0)


def test_case_9():
    web_client_0 = module_0.WebClient()
    assert (
        f"{type(web_client_0).__module__}.{type(web_client_0).__qualname__}"
        == "pywrapid.webclient.web.WebClient"
    )
    str_0 = "p"
    str_1 = "\\A"
    basic_auth_credentials_0 = module_0.BasicAuthCredentials(str_0, str_0, str_1)
    assert (
        f"{type(basic_auth_credentials_0).__module__}.{type(basic_auth_credentials_0).__qualname__}"
        == "pywrapid.webclient.web.BasicAuthCredentials"
    )
    str_2 = "25\\jW^\x0c"
    str_3 = "\nv\x0c<`"
    basic_auth_credentials_1 = module_0.BasicAuthCredentials(str_3, str_2)
    str_4 = "+)Ad"
    dict_0 = {web_client_0: str_4}
    with pytest.raises(module_1.ClientException):
        module_0.WebClient(dict_config=dict_0, wrapid_config=str_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    web_credentials_0 = module_0.WebCredentials()
    assert (
        f"{type(web_credentials_0).__module__}.{type(web_credentials_0).__qualname__}"
        == "pywrapid.webclient.web.WebCredentials"
    )
    assert (
        f"{type(module_0.WebCredentials.options).__module__}.{type(module_0.WebCredentials.options).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.WebCredentials.login_url).__module__}.{type(module_0.WebCredentials.login_url).__qualname__}"
        == "builtins.property"
    )
    module_0.WebClient(credentials=web_credentials_0)


def test_case_11():
    str_0 = "p"
    basic_auth_credentials_0 = module_0.BasicAuthCredentials(str_0, str_0, str_0)
    assert (
        f"{type(basic_auth_credentials_0).__module__}.{type(basic_auth_credentials_0).__qualname__}"
        == "pywrapid.webclient.web.BasicAuthCredentials"
    )
    str_1 = "\x0bs^#DH"
    with pytest.raises(module_1.CredentialCertificateFileError):
        module_0.X509Credentials(str_0, str_1)


def test_case_12():
    str_0 = "p"
    file = os.path.abspath(__file__)
    basic_auth_credentials_0 = module_0.BasicAuthCredentials(str_0, str_0, str_0)
    assert (
        f"{type(basic_auth_credentials_0).__module__}.{type(basic_auth_credentials_0).__qualname__}"
        == "pywrapid.webclient.web.BasicAuthCredentials"
    )

    x509_credentials_0 = module_0.X509Credentials(file, file)
    assert (
        f"{type(x509_credentials_0).__module__}.{type(x509_credentials_0).__qualname__}"
        == "pywrapid.webclient.web.X509Credentials"
    )
    with pytest.raises(AssertionError):
        module_4.quote(basic_auth_credentials_0)
    with pytest.raises(module_1.CredentialKeyFileError):
        module_4.quote(module_0.X509Credentials(file, str_0))
    with pytest.raises(module_1.CredentialCertificateFileError):
        module_4.quote(module_0.X509Credentials(str_0, file))
